Shaders for rendering
- Learn how to write vertex and fragment shaders in GLSL.
- Understand how shaders control the graphics pipeline and render your objects.

VBOs (Vertex Buffer Objects)
- Learn how to create buffers that hold your vertex data (positions, colors, normals, texture coords).
- Upload that data to the GPU for efficient access.

VAOs (Vertex Array Objects)
- Learn how to bind VBOs and describe vertex attribute formats using VAOs.
- VAOs “remember” how vertex data is arranged, so you can draw by simply binding the VAO.

But why in this order?

Shaders are fundamental because without them, the GPU doesn’t know how to process your vertices or fragments.
VBOs are next because you need to get data onto the GPU.
VAOs tie it all together by organizing how the vertex data should be fed into shaders.


Main types of shaders you’ll work with in OpenGL:

Vertex Shader
Runs once for every vertex you send in.
Its job is to process each vertex’s data (position, color, texture coordinates, etc.) and transform it (usually from 3D world coords to 2D screen coords).
Think: it positions and prepares each vertex for drawing.

Fragment Shader (or Pixel Shader)
Runs once for every pixel (fragment) that results from rasterizing your triangles.
It decides the final color and other attributes of each pixel on screen.
Think: it paints each pixel.

OpenGL Core Profile VAO VBO explained
OpenGL 3.3 shader setup macOS
OpenGL GLSL vertex fragment shader tutorial
OpenGL minimal triangle Core Profile

AVOID anything using glBegin, glVertex3f, or no shaders.

